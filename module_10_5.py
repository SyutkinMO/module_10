# --------------------"Многопроцессное программирование"--------------------


from multiprocessing import Pool

import time

# Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.

"""Создайте функцию read_info(name), где name - название файла. Функция должна:
Создавать локальный список all_data.
Открывать файл name для чтения.
Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
Во время считывания добавлять каждую строку в список all_data."""

"""Метод файла file.readline() читает одну целую строку из файла. Конечный символ новой строки \n сохраняется в строке.
 Метод возвращает одну строку или байтовый объект в зависимости от режима, в котором открыт файл функцией open()."""


def read_info(name):
    all_data = []
    with open(name, 'r', encoding='utf-8') as file: # открываем файл в режиме чтения
        while True:  # создаем бесконечный цикл
            line = file.readline() # читаем файл построчно
            if not line:  # проверка строки на пустоту
                break
            all_data.append(line) # если строка не пустая добавляем её в список
    # функция ничего не возвращает, так как задача стоит подсчитать время работы


"""Создайте список названий файлов в соответствии с названиями файлов архива.
Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в консоль.
Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with и объект Pool.
 Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов. 
 Измерьте время выполнения и выведите его в консоль."""

file_names = [f'./file {number}.txt' for number in range(1, 5)]

if __name__ == '__main__':  # обязательная строка для работы с процессами
    start = time.time()  # отмечаем время начала работы
    with Pool() as process_pool:  # Создание пула процессов
        process_pool.map(read_info, file_names)  # функция map для пула параллельных процессов

    end = time.time()  # время окончания работы пула процессов
    print(end - start)  # печатаем разницу времени начала и конца, пул процессов работает минимум в 3 раза быстрее

    # Линейный вызов
    start1 = time.time()
    for i in file_names:
        read_info(i)
    end1 = time.time()
    print(end1 - start1)
